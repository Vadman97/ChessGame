import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeListener;
import java.net.URL;

import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;

public class ChessGuiBKP implements ActionListener
{

	private final JPanel		gui					= new JPanel(new BorderLayout(3, 3));
	private JButton[][]			chessBoardSquares	= new JButton[8][8];
	private Image[][]			chessPieceImages	= new Image[2][6];
	private JPanel				chessBoard;
	private final JLabel		message				= new JLabel("Chess Champ is ready to play!");
	private static final String	COLS				= "ABCDEFGH";
	public static final int		QUEEN				= 0, KING = 1, ROOK = 2, KNIGHT = 3, BISHOP = 4, PAWN = 5;
	public static final int[]	STARTING_ROW		=
													{ ChessGuiBKP.ROOK, ChessGuiBKP.KNIGHT, ChessGuiBKP.BISHOP, ChessGuiBKP.KING, ChessGuiBKP.QUEEN, ChessGuiBKP.BISHOP, ChessGuiBKP.KNIGHT, ChessGuiBKP.ROOK };
	public static final int		BLACK				= 0, WHITE = 1;

	public static void main(String[] args)
	{
		Runnable r = new Runnable()
		{

			@Override
			public void run()
			{
				ChessGuiBKP cg = new ChessGuiBKP();

				JFrame f = new JFrame("ChessChamp");
				f.add(cg.getGui());
				// Ensures JVM closes after frame(s) closed and
				// all non-daemon threads are finished
				f.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
				// See http://stackoverflow.com/a/7143398/418556 for demo.
				f.setLocationByPlatform(true);

				// ensures the frame is the minimum size it needs to be
				// in order display the components within it
				f.pack();
				// ensures the minimum size is enforced.
				f.setMinimumSize(f.getSize());
				f.setVisible(true);
			}
		};
		// Swing GUIs should be created and updated on the EDT
		// http://docs.oracle.com/javase/tutorial/uiswing/concurrency
		SwingUtilities.invokeLater(r);
	}

	public ChessGuiBKP()
	{
		this.initializeGui();
	}

	private final void createImages()
	{
		try
		{
			URL url = new URL("http://i.stack.imgur.com/memI0.png");
			BufferedImage bi = ImageIO.read(url);
			for (int ii = 0; ii < 2; ii++)
			{
				for (int jj = 0; jj < 6; jj++)
				{
					this.chessPieceImages[ii][jj] = bi.getSubimage(jj * 64, ii * 64, 64, 64);
				}
			}
		} catch (Exception e)
		{
			e.printStackTrace();
			System.exit(1);
		}
	}

	public final JComponent getGui()
	{
		return this.gui;
	}

	public final void initializeGui()
	{
		// create the images for the chess pieces
		this.createImages();

		// set up the main GUI
		this.gui.setBorder(new EmptyBorder(5, 5, 5, 5));
		JToolBar tools = new JToolBar();
		tools.setFloatable(false);
		this.gui.add(tools, BorderLayout.PAGE_START);
		Action newGameAction = new AbstractAction("New")
		{

			/**
			 * 
			 */
			private static final long	serialVersionUID	= -5929616858105243416L;

			@Override
			public void actionPerformed(ActionEvent e)
			{
				ChessGuiBKP.this.setupNewGame();
			}
		};
		tools.add(newGameAction);
		tools.add(new JButton("Save")); // TODO - add functionality!
		tools.add(new JButton("Restore")); // TODO - add functionality!
		tools.addSeparator();
		tools.add(new JButton("Resign")); // TODO - add functionality!
		tools.addSeparator();
		tools.add(this.message);

		this.gui.add(new JLabel("?"), BorderLayout.LINE_START);

		this.chessBoard = new JPanel(new GridLayout(0, 9))
		{
			private static final long	serialVersionUID	= -2092792667329990596L;

			/**
			 * Override the preferred size to return the largest it can, in a
			 * square shape. Must (must, must) be added to a GridBagLayout as
			 * the only component (it uses the parent as a guide to size) with
			 * no BagConstaint (so it is centered).
			 */
			@Override
			public final Dimension getPreferredSize()
			{
				Dimension d = super.getPreferredSize();
				Dimension prefSize = null;
				Component c = this.getParent();
				if (c == null)
				{
					prefSize = new Dimension((int) d.getWidth(), (int) d.getHeight());
				} else if ((c != null) && (c.getWidth() > d.getWidth()) && (c.getHeight() > d.getHeight()))
				{
					prefSize = c.getSize();
				} else
				{
					prefSize = d;
				}
				int w = (int) prefSize.getWidth();
				int h = (int) prefSize.getHeight();
				// the smaller of the two sizes
				int s = (w > h ? h : w);
				return new Dimension(s, s);
			}
		};
		this.chessBoard.setBorder(new CompoundBorder(new EmptyBorder(8, 8, 8, 8), new LineBorder(Color.BLACK)));
		// Set the BG to be ochre
		Color ochre = new Color(204, 119, 34);
		this.chessBoard.setBackground(ochre);
		JPanel boardConstrain = new JPanel(new GridBagLayout());
		boardConstrain.setBackground(ochre);
		boardConstrain.add(this.chessBoard);
		this.gui.add(boardConstrain);

		// create the chess board squares
		Insets buttonMargin = new Insets(0, 0, 0, 0);
		for (int ii = 0; ii < this.chessBoardSquares.length; ii++)
		{
			for (int jj = 0; jj < this.chessBoardSquares[ii].length; jj++)
			{
				JButton b = new JButton();
				b.setMargin(buttonMargin);
				// our chess pieces are 64x64 px in size, so we'll
				// 'fill this in' using a transparent icon..
				ImageIcon icon = new ImageIcon(new BufferedImage(64, 64, BufferedImage.TYPE_INT_ARGB));
				b.setIcon(icon);
				if ((((jj % 2) == 1) && ((ii % 2) == 1))
				// ) {
						|| (((jj % 2) == 0) && ((ii % 2) == 0)))
				{
					b.setBackground(Color.WHITE);
				} else
				{
					b.setBackground(Color.BLACK);
				}
				b.setActionCommand(ii + "|" + jj);
				b.addActionListener(this);
				this.chessBoardSquares[jj][ii] = b;
			}
		}

		/*
		 * fill the chess board
		 */
		this.chessBoard.add(new JLabel(""));
		// fill the top row
		for (int ii = 0; ii < 8; ii++)
		{
			this.chessBoard.add(new JLabel(ChessGuiBKP.COLS.substring(ii, ii + 1), SwingConstants.CENTER));
		}
		// fill the black non-pawn piece row
		for (int ii = 0; ii < 8; ii++)
		{
			for (int jj = 0; jj < 8; jj++)
			{
				switch (jj)
				{
					case 0:
						this.chessBoard.add(new JLabel("" + (9 - (ii + 1)), SwingConstants.CENTER));
					default:
						this.chessBoard.add(this.chessBoardSquares[jj][ii]);
				}
			}
		}
	}
	
	public void actionPerformed(ActionEvent e) 
	{
		String commandString = e.getActionCommand();
		int indexOfBar = commandString.indexOf('|');
		int row = Integer.parseInt(commandString.substring(0,indexOfBar));
		int col = Integer.parseInt(commandString.substring(indexOfBar + 1, commandString.length()));
		System.out.println(row + " " + col);
	}

	/**
	 * Initializes the icons of the initial chess board piece places
	 */
	private final void setupNewGame()
	{
		this.message.setText("Make your move!");
		// set up the black pieces
		for (int ii = 0; ii < ChessGuiBKP.STARTING_ROW.length; ii++)
		{
			this.chessBoardSquares[ii][0].setIcon(new ImageIcon(this.chessPieceImages[ChessGuiBKP.BLACK][ChessGuiBKP.STARTING_ROW[ii]]));
		}
		for (int ii = 0; ii < ChessGuiBKP.STARTING_ROW.length; ii++)
		{
			this.chessBoardSquares[ii][1].setIcon(new ImageIcon(this.chessPieceImages[ChessGuiBKP.BLACK][ChessGuiBKP.PAWN]));
		}
		// set up the white pieces
		for (int ii = 0; ii < ChessGuiBKP.STARTING_ROW.length; ii++)
		{
			this.chessBoardSquares[ii][6].setIcon(new ImageIcon(this.chessPieceImages[ChessGuiBKP.WHITE][ChessGuiBKP.PAWN]));
		}
		for (int ii = 0; ii < ChessGuiBKP.STARTING_ROW.length; ii++)
		{
			this.chessBoardSquares[ii][7].setIcon(new ImageIcon(this.chessPieceImages[ChessGuiBKP.WHITE][ChessGuiBKP.STARTING_ROW[ii]]));
		}
	}
}